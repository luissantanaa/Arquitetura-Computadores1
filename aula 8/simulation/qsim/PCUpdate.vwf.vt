// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/08/2016 12:33:20"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          PCupdate
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PCupdate_vlg_vec_tst();
// constants                                           
// general purpose registers
reg branch;
reg clk;
reg [25:0] jAddr;
reg jump;
reg [31:0] offset;
reg reset;
reg zero;
// wires                                               
wire [31:0] pc;

// assign statements (if any)                          
PCupdate i1 (
// port map - connection between master ports and signals/registers   
	.branch(branch),
	.clk(clk),
	.jAddr(jAddr),
	.jump(jump),
	.offset(offset),
	.pc(pc),
	.reset(reset),
	.zero(zero)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #20000 1'b0;
	clk = #40000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #20000 1'b0;
	clk = #10000 1'b1;
	clk = #20000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #40000 1'b1;
	clk = #40000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #30000 1'b1;
	clk = #20000 1'b0;
	clk = #20000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #60000 1'b0;
	clk = #20000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #30000 1'b0;
	clk = #10000 1'b1;
	clk = #20000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #20000 1'b1;
	clk = #10000 1'b0;
	clk = #60000 1'b1;
	clk = #20000 1'b0;
	clk = #20000 1'b1;
	clk = #10000 1'b0;
	clk = #30000 1'b1;
	clk = #10000 1'b0;
	clk = #20000 1'b1;
	clk = #20000 1'b0;
	clk = #30000 1'b1;
	clk = #50000 1'b0;
	clk = #20000 1'b1;
	clk = #40000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
end 

// branch
initial
begin
	branch = 1'b0;
end 

// jump
initial
begin
	jump = 1'b0;
	jump = #10000 1'b1;
end 
// jAddr[ 25 ]
initial
begin
	jAddr[25] = 1'b0;
end 
// jAddr[ 24 ]
initial
begin
	jAddr[24] = 1'b0;
end 
// jAddr[ 23 ]
initial
begin
	jAddr[23] = 1'b0;
end 
// jAddr[ 22 ]
initial
begin
	jAddr[22] = 1'b0;
end 
// jAddr[ 21 ]
initial
begin
	jAddr[21] = 1'b0;
end 
// jAddr[ 20 ]
initial
begin
	jAddr[20] = 1'b0;
end 
// jAddr[ 19 ]
initial
begin
	jAddr[19] = 1'b0;
end 
// jAddr[ 18 ]
initial
begin
	jAddr[18] = 1'b0;
end 
// jAddr[ 17 ]
initial
begin
	jAddr[17] = 1'b0;
end 
// jAddr[ 16 ]
initial
begin
	jAddr[16] = 1'b0;
end 
// jAddr[ 15 ]
initial
begin
	jAddr[15] = 1'b0;
end 
// jAddr[ 14 ]
initial
begin
	jAddr[14] = 1'b0;
end 
// jAddr[ 13 ]
initial
begin
	jAddr[13] = 1'b0;
end 
// jAddr[ 12 ]
initial
begin
	jAddr[12] = 1'b0;
end 
// jAddr[ 11 ]
initial
begin
	jAddr[11] = 1'b0;
end 
// jAddr[ 10 ]
initial
begin
	jAddr[10] = 1'b0;
end 
// jAddr[ 9 ]
initial
begin
	jAddr[9] = 1'b0;
end 
// jAddr[ 8 ]
initial
begin
	jAddr[8] = 1'b0;
end 
// jAddr[ 7 ]
initial
begin
	jAddr[7] = 1'b0;
end 
// jAddr[ 6 ]
initial
begin
	jAddr[6] = 1'b0;
end 
// jAddr[ 5 ]
initial
begin
	jAddr[5] = 1'b0;
end 
// jAddr[ 4 ]
initial
begin
	jAddr[4] = 1'b0;
end 
// jAddr[ 3 ]
initial
begin
	jAddr[3] = 1'b0;
end 
// jAddr[ 2 ]
initial
begin
	jAddr[2] = 1'b1;
end 
// jAddr[ 1 ]
initial
begin
	jAddr[1] = 1'b0;
end 
// jAddr[ 0 ]
initial
begin
	jAddr[0] = 1'b1;
end 
// offset[ 31 ]
initial
begin
	offset[31] = 1'b0;
end 
// offset[ 30 ]
initial
begin
	offset[30] = 1'b0;
end 
// offset[ 29 ]
initial
begin
	offset[29] = 1'b0;
end 
// offset[ 28 ]
initial
begin
	offset[28] = 1'b0;
end 
// offset[ 27 ]
initial
begin
	offset[27] = 1'b0;
end 
// offset[ 26 ]
initial
begin
	offset[26] = 1'b0;
end 
// offset[ 25 ]
initial
begin
	offset[25] = 1'b0;
end 
// offset[ 24 ]
initial
begin
	offset[24] = 1'b0;
end 
// offset[ 23 ]
initial
begin
	offset[23] = 1'b0;
end 
// offset[ 22 ]
initial
begin
	offset[22] = 1'b0;
end 
// offset[ 21 ]
initial
begin
	offset[21] = 1'b0;
end 
// offset[ 20 ]
initial
begin
	offset[20] = 1'b0;
end 
// offset[ 19 ]
initial
begin
	offset[19] = 1'b0;
end 
// offset[ 18 ]
initial
begin
	offset[18] = 1'b0;
end 
// offset[ 17 ]
initial
begin
	offset[17] = 1'b0;
end 
// offset[ 16 ]
initial
begin
	offset[16] = 1'b0;
end 
// offset[ 15 ]
initial
begin
	offset[15] = 1'b0;
end 
// offset[ 14 ]
initial
begin
	offset[14] = 1'b0;
end 
// offset[ 13 ]
initial
begin
	offset[13] = 1'b0;
end 
// offset[ 12 ]
initial
begin
	offset[12] = 1'b0;
end 
// offset[ 11 ]
initial
begin
	offset[11] = 1'b0;
end 
// offset[ 10 ]
initial
begin
	offset[10] = 1'b0;
end 
// offset[ 9 ]
initial
begin
	offset[9] = 1'b0;
end 
// offset[ 8 ]
initial
begin
	offset[8] = 1'b0;
end 
// offset[ 7 ]
initial
begin
	offset[7] = 1'b0;
end 
// offset[ 6 ]
initial
begin
	offset[6] = 1'b0;
end 
// offset[ 5 ]
initial
begin
	offset[5] = 1'b0;
end 
// offset[ 4 ]
initial
begin
	offset[4] = 1'b0;
end 
// offset[ 3 ]
initial
begin
	offset[3] = 1'b0;
end 
// offset[ 2 ]
initial
begin
	offset[2] = 1'b0;
end 
// offset[ 1 ]
initial
begin
	offset[1] = 1'b0;
end 
// offset[ 0 ]
initial
begin
	offset[0] = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// zero
initial
begin
	zero = 1'b0;
end 
endmodule

