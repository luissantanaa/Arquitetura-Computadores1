// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/13/2016 12:17:07"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          PCupdate
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PCupdate_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] BTA;
reg clk;
reg [25:0] jAddr;
reg [31:0] PC4;
reg [1:0] PCSource;
reg PCWrite;
reg PCWriteCond;
reg reset;
reg zero;
// wires                                               
wire [31:0] pc;

// assign statements (if any)                          
PCupdate i1 (
// port map - connection between master ports and signals/registers   
	.BTA(BTA),
	.clk(clk),
	.jAddr(jAddr),
	.pc(pc),
	.PC4(PC4),
	.PCSource(PCSource),
	.PCWrite(PCWrite),
	.PCWriteCond(PCWriteCond),
	.reset(reset),
	.zero(zero)
);
initial 
begin 
#1000000 $finish;
end 
// BTA[ 31 ]
initial
begin
	BTA[31] = 1'b0;
end 
// BTA[ 30 ]
initial
begin
	BTA[30] = 1'b0;
end 
// BTA[ 29 ]
initial
begin
	BTA[29] = 1'b0;
end 
// BTA[ 28 ]
initial
begin
	BTA[28] = 1'b0;
end 
// BTA[ 27 ]
initial
begin
	BTA[27] = 1'b0;
end 
// BTA[ 26 ]
initial
begin
	BTA[26] = 1'b0;
end 
// BTA[ 25 ]
initial
begin
	BTA[25] = 1'b0;
end 
// BTA[ 24 ]
initial
begin
	BTA[24] = 1'b0;
end 
// BTA[ 23 ]
initial
begin
	BTA[23] = 1'b0;
end 
// BTA[ 22 ]
initial
begin
	BTA[22] = 1'b0;
end 
// BTA[ 21 ]
initial
begin
	BTA[21] = 1'b0;
end 
// BTA[ 20 ]
initial
begin
	BTA[20] = 1'b0;
end 
// BTA[ 19 ]
initial
begin
	BTA[19] = 1'b0;
end 
// BTA[ 18 ]
initial
begin
	BTA[18] = 1'b0;
end 
// BTA[ 17 ]
initial
begin
	BTA[17] = 1'b0;
end 
// BTA[ 16 ]
initial
begin
	BTA[16] = 1'b0;
end 
// BTA[ 15 ]
initial
begin
	BTA[15] = 1'b0;
end 
// BTA[ 14 ]
initial
begin
	BTA[14] = 1'b0;
end 
// BTA[ 13 ]
initial
begin
	BTA[13] = 1'b0;
end 
// BTA[ 12 ]
initial
begin
	BTA[12] = 1'b0;
end 
// BTA[ 11 ]
initial
begin
	BTA[11] = 1'bX;
end 
// BTA[ 10 ]
initial
begin
	BTA[10] = 1'bX;
end 
// BTA[ 9 ]
initial
begin
	BTA[9] = 1'bX;
end 
// BTA[ 8 ]
initial
begin
	BTA[8] = 1'bX;
end 
// BTA[ 7 ]
initial
begin
	BTA[7] = 1'b0;
end 
// BTA[ 6 ]
initial
begin
	BTA[6] = 1'b0;
end 
// BTA[ 5 ]
initial
begin
	BTA[5] = 1'b0;
end 
// BTA[ 4 ]
initial
begin
	BTA[4] = 1'b0;
end 
// BTA[ 3 ]
initial
begin
	BTA[3] = 1'b1;
end 
// BTA[ 2 ]
initial
begin
	BTA[2] = 1'b1;
end 
// BTA[ 1 ]
initial
begin
	BTA[1] = 1'b0;
end 
// BTA[ 0 ]
initial
begin
	BTA[0] = 1'b0;
end 

// clk
initial
begin
	clk = 1'b0;
end 
// jAddr[ 25 ]
initial
begin
	jAddr[25] = 1'b0;
end 
// jAddr[ 24 ]
initial
begin
	jAddr[24] = 1'b0;
end 
// jAddr[ 23 ]
initial
begin
	jAddr[23] = 1'b0;
end 
// jAddr[ 22 ]
initial
begin
	jAddr[22] = 1'b0;
end 
// jAddr[ 21 ]
initial
begin
	jAddr[21] = 1'b0;
end 
// jAddr[ 20 ]
initial
begin
	jAddr[20] = 1'b0;
end 
// jAddr[ 19 ]
initial
begin
	jAddr[19] = 1'b0;
end 
// jAddr[ 18 ]
initial
begin
	jAddr[18] = 1'b0;
end 
// jAddr[ 17 ]
initial
begin
	jAddr[17] = 1'b0;
end 
// jAddr[ 16 ]
initial
begin
	jAddr[16] = 1'b0;
end 
// jAddr[ 15 ]
initial
begin
	jAddr[15] = 1'b0;
end 
// jAddr[ 14 ]
initial
begin
	jAddr[14] = 1'b0;
end 
// jAddr[ 13 ]
initial
begin
	jAddr[13] = 1'b0;
end 
// jAddr[ 12 ]
initial
begin
	jAddr[12] = 1'b0;
end 
// jAddr[ 11 ]
initial
begin
	jAddr[11] = 1'b0;
end 
// jAddr[ 10 ]
initial
begin
	jAddr[10] = 1'b0;
end 
// jAddr[ 9 ]
initial
begin
	jAddr[9] = 1'b0;
end 
// jAddr[ 8 ]
initial
begin
	jAddr[8] = 1'b0;
end 
// jAddr[ 7 ]
initial
begin
	jAddr[7] = 1'b0;
end 
// jAddr[ 6 ]
initial
begin
	jAddr[6] = 1'b0;
end 
// jAddr[ 5 ]
initial
begin
	jAddr[5] = 1'b0;
end 
// jAddr[ 4 ]
initial
begin
	jAddr[4] = 1'b0;
end 
// jAddr[ 3 ]
initial
begin
	jAddr[3] = 1'b0;
end 
// jAddr[ 2 ]
initial
begin
	jAddr[2] = 1'b0;
end 
// jAddr[ 1 ]
initial
begin
	jAddr[1] = 1'b0;
end 
// jAddr[ 0 ]
initial
begin
	jAddr[0] = 1'b0;
end 
// PC4[ 31 ]
initial
begin
	PC4[31] = 1'b0;
end 
// PC4[ 30 ]
initial
begin
	PC4[30] = 1'b0;
end 
// PC4[ 29 ]
initial
begin
	PC4[29] = 1'b0;
end 
// PC4[ 28 ]
initial
begin
	PC4[28] = 1'b0;
end 
// PC4[ 27 ]
initial
begin
	PC4[27] = 1'b0;
end 
// PC4[ 26 ]
initial
begin
	PC4[26] = 1'b0;
end 
// PC4[ 25 ]
initial
begin
	PC4[25] = 1'b0;
end 
// PC4[ 24 ]
initial
begin
	PC4[24] = 1'b0;
end 
// PC4[ 23 ]
initial
begin
	PC4[23] = 1'b0;
end 
// PC4[ 22 ]
initial
begin
	PC4[22] = 1'b0;
end 
// PC4[ 21 ]
initial
begin
	PC4[21] = 1'b0;
end 
// PC4[ 20 ]
initial
begin
	PC4[20] = 1'b0;
end 
// PC4[ 19 ]
initial
begin
	PC4[19] = 1'b0;
end 
// PC4[ 18 ]
initial
begin
	PC4[18] = 1'b0;
end 
// PC4[ 17 ]
initial
begin
	PC4[17] = 1'b0;
end 
// PC4[ 16 ]
initial
begin
	PC4[16] = 1'b0;
end 
// PC4[ 15 ]
initial
begin
	PC4[15] = 1'b0;
end 
// PC4[ 14 ]
initial
begin
	PC4[14] = 1'b0;
end 
// PC4[ 13 ]
initial
begin
	PC4[13] = 1'b0;
end 
// PC4[ 12 ]
initial
begin
	PC4[12] = 1'b0;
end 
// PC4[ 11 ]
initial
begin
	PC4[11] = 1'b0;
end 
// PC4[ 10 ]
initial
begin
	PC4[10] = 1'b0;
end 
// PC4[ 9 ]
initial
begin
	PC4[9] = 1'b0;
end 
// PC4[ 8 ]
initial
begin
	PC4[8] = 1'b0;
end 
// PC4[ 7 ]
initial
begin
	PC4[7] = 1'b0;
end 
// PC4[ 6 ]
initial
begin
	PC4[6] = 1'b0;
end 
// PC4[ 5 ]
initial
begin
	PC4[5] = 1'b0;
end 
// PC4[ 4 ]
initial
begin
	PC4[4] = 1'b0;
end 
// PC4[ 3 ]
initial
begin
	PC4[3] = 1'b0;
end 
// PC4[ 2 ]
initial
begin
	PC4[2] = 1'b0;
end 
// PC4[ 1 ]
initial
begin
	PC4[1] = 1'b0;
end 
// PC4[ 0 ]
initial
begin
	PC4[0] = 1'b0;
end 
// PCSource[ 1 ]
initial
begin
	PCSource[1] = 1'b0;
end 
// PCSource[ 0 ]
initial
begin
	PCSource[0] = 1'b1;
end 

// PCWrite
initial
begin
	PCWrite = 1'b0;
end 

// PCWriteCond
initial
begin
	PCWriteCond = 1'b1;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// zero
initial
begin
	zero = 1'b1;
end 
endmodule

